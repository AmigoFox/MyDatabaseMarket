@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject MyDatabaseMarket.Database.AppDbContext _context


<AuthorizeView>
    <Authorized>
        @if (showMessage)
        {
            <div class="alert alert-success mt-3">
                ✅ Конфигурация успешно сохранена!
            </div>
        }

        <h3>@Title</h3>
        <p>Настройте параметры вашей базы данных:</p>

        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">Тип базы данных:</label>
                        <select class="form-select" @bind="BoundType">
                            <option value="MySQL">MySQL</option>
                            <option value="PostgreSQL">PostgreSQL</option>
                            <option value="MongoDB">MongoDB</option>
                            <option value="Redis">Redis</option>
                            <option value="SQLite">SQLite</option>
                            <option value="Microsoft SQL Server">Microsoft SQL Server</option>
                            <option value="Cassandra">Cassandra</option>
                            <option value="Oracle Database">Oracle Database</option>
                            <option value="MariaDB">MariaDB</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Объём (GB):</label>
                        <input type="number" class="form-control" @bind="BoundSize" @bind:event="oninput" min="1" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Тип хранилища:</label>
                        <select class="form-select" @bind="BoundStorageType">
                            <option value="HDD">HDD (дешево, медленно)</option>
                            <option value="SSD">SSD (баланс)</option>
                            <option value="NVMe">NVMe (быстро, дорого)</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Скорость (IOPS):</label>
                        <select class="form-select" @bind="BoundIOPS">
                            <option value="Низкая (100)">Низкая (100)</option>
                            <option value="Средняя (1000)">Средняя (1000)</option>
                            <option value="Высокая (5000)">Высокая (5000)</option>
                            <option value="Очень высокая (10000)">Очень высокая (10000)</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Масштабируемость:</label>
                        <select class="form-select" @bind="BoundScalability">
                            <option value="None">Без масштабирования</option>
                            <option value="Replication">Репликация</option>
                            <option value="Autoscaling">Авто-скейлинг</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Выберите страны (1-3):</label>
                        <div>
                            <input type="checkbox" @bind="RussiaSelected" disabled="@(GetSelectedCountries().Count() >= 3 && !RussiaSelected)" /> Россия
                            <input type="checkbox" @bind="KazakhstanSelected" disabled="@(GetSelectedCountries().Count() >= 3 && !KazakhstanSelected)" /> Казахстан
                            <input type="checkbox" @bind="ChinaSelected" disabled="@(GetSelectedCountries().Count() >= 3 && !ChinaSelected)" /> Китай
                            <input type="checkbox" @bind="UzbekistanSelected" disabled="@(GetSelectedCountries().Count() >= 3 && !UzbekistanSelected)" /> Узбекистан
                            <input type="checkbox" @bind="BelarusSelected" disabled="@(GetSelectedCountries().Count() >= 3 && !BelarusSelected)" /> Беларусь
                        </div>
                        <p>Выбрано стран: @SelectedCountriesCount</p>
                        @if (GetSelectedCountries().Count() > 3)
                        {
                            <p class="text-danger">Максимум 3 страны, лишние сброшены!</p>
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Результат:</h4>
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Параметр</th>
                                <th>Значение</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Тип базы данных</td>
                                <td><strong>@SelectedType</strong></td>
                            </tr>
                            <tr>
                                <td>Объём</td>
                                <td><strong>@SizeGB GB</strong></td>
                            </tr>
                            <tr>
                                <td>Тип хранилища</td>
                                <td><strong>@StorageType</strong></td>
                            </tr>
                            <tr>
                                <td>Скорость (IOPS)</td>
                                <td><strong>@SelectedIOPS</strong></td>
                            </tr>
                            <tr>
                                <td>Масштабируемость</td>
                                <td><strong>@Scalability</strong></td>
                            </tr>
                            <tr>
                                <td>Страны</td>
                                <td><strong>@string.Join(", ", GetSelectedCountries())</strong></td>
                            </tr>
                            <tr>
                                <td>Стоимость (RUB)</td>
                                <td><strong>@PriceInRub.ToString("N2") @RUB_SYMBOL</strong></td>
                            </tr>
                            <tr>
                                <td>Стоимость (USD)</td>
                                <td><strong>@PriceInUsd.ToString("N2") @USD_SYMBOL</strong></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <button class="btn btn-success mt-2" @onclick="SaveOrder">Сохранить</button>

        </div>

    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            <p>
                Вы не авторизованы. Пожалуйста,
                <a href="/Account/Index">войдите в личный кабинет</a> или зарегистрируйтесь.
            </p>
        </div>
    </NotAuthorized>




</AuthorizeView>

@code {
    private bool showMessage;
    private string Title = "Калькулятор баз данных";

    private const decimal FIXED_USD_TO_RUB_RATE = 95m;
    private const string RUB_SYMBOL = "₽";
    private const string USD_SYMBOL = "$";

    private decimal PriceInRub => Price;
    private decimal PriceInUsd => Price / FIXED_USD_TO_RUB_RATE;

    private string SelectedType { get; set; } = "MySQL";
    private int SizeGB { get; set; } = 10;
    private string SelectedIOPS { get; set; } = "Низкая (100)";
    private string StorageType { get; set; } = "SSD";
    private string Scalability { get; set; } = "None";
    private decimal Price { get; set; }

    private bool _russiaSelected = true;
    private bool RussiaSelected
    {
        get => _russiaSelected;
        set { _russiaSelected = value; ValidateAndUpdate(); }
    }
    private bool _kazakhstanSelected = false;
    private bool KazakhstanSelected
    {
        get => _kazakhstanSelected;
        set { _kazakhstanSelected = value; ValidateAndUpdate(); }
    }
    private bool _chinaSelected = false;
    private bool ChinaSelected
    {
        get => _chinaSelected;
        set { _chinaSelected = value; ValidateAndUpdate(); }
    }
    private bool _uzbekistanSelected = false;
    private bool UzbekistanSelected
    {
        get => _uzbekistanSelected;
        set { _uzbekistanSelected = value; ValidateAndUpdate(); }
    }
    private bool _belarusSelected = false;
    private bool BelarusSelected
    {
        get => _belarusSelected;
        set { _belarusSelected = value; ValidateAndUpdate(); }
    }

    private int SelectedCountriesCount => GetSelectedCountries().Count();

    protected override void OnInitialized()
    {
        ValidateAndUpdate();

        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query["saved"] == "true")
        {
            showMessage = true;
        }

        if (int.TryParse(query["id"], out int orderId))
        {
            var order = _context.Orders.FirstOrDefault(o => o.Id == orderId);
            if (order != null)
            {
                
                SelectedType = order.DatabaseType;
                SizeGB = order.SizeGB;
                StorageType = order.StorageType;
                SelectedIOPS = order.IOPS;
                Scalability = order.Scalability;

                RussiaSelected = order.Country.Contains("Россия");
                KazakhstanSelected = order.Country.Contains("Казахстан");
                ChinaSelected = order.Country.Contains("Китай");
                UzbekistanSelected = order.Country.Contains("Узбекистан");
                BelarusSelected = order.Country.Contains("Беларусь");

                UpdatePrice();

                EditingOrderId = order.Id;
            }
        }
    }

    private int? EditingOrderId = null;








    private async Task SaveOrder()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity?.IsAuthenticated ?? true)
            return;

        int userId = int.Parse(user.Claims.First(c => c.Type == "UserId").Value);

        if (EditingOrderId.HasValue)
        {
            var order = _context.Orders.FirstOrDefault(o => o.Id == EditingOrderId.Value);
            if (order != null)
            {
                order.DatabaseType = SelectedType;
                order.SizeGB = SizeGB;
                order.IOPS = SelectedIOPS;
                order.StorageType = StorageType;
                order.Scalability = Scalability;
                order.Country = string.Join(", ", GetSelectedCountries());
                order.PriceUSD = Math.Round(PriceInUsd, 2);
                order.PriceRUB = Math.Round(PriceInRub, 2);

                _context.Orders.Update(order);

                var payment = _context.Payments.FirstOrDefault(p => p.OrderId == order.Id);
                if (payment != null)
                {
                    payment.AmountUSD = order.PriceUSD;
                    payment.AmountRUB = order.PriceRUB;
                    payment.Status = "Ожидает оплаты";
                    _context.Payments.Update(payment);
                }

                await _context.SaveChangesAsync();
            }
        }
        else
        {
            var order = new MyDatabaseMarket.Database.Order
            {
                UserId = userId,
                DatabaseType = SelectedType,
                SizeGB = SizeGB,
                IOPS = SelectedIOPS,
                StorageType = StorageType,
                Scalability = Scalability,
                Country = string.Join(", ", GetSelectedCountries()),
                PriceUSD = Math.Round(PriceInUsd, 2),
                PriceRUB = Math.Round(PriceInRub, 2),
                OrderDate = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss"),
                Status = "Ожидает оплаты"
            };

            _context.Orders.Add(order);
            await _context.SaveChangesAsync();

            var payment = new MyDatabaseMarket.Database.Payment
            {
                UserId = userId,
                OrderId = order.Id,
                PaymentDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                AmountUSD = order.PriceUSD,
                AmountRUB = order.PriceRUB,
                Status = "Ожидает оплаты",
                NextPaymentDate = "--"
            };

            _context.Payments.Add(payment);
            await _context.SaveChangesAsync();
        }

        Navigation.NavigateTo("/Calculator?saved=true", forceLoad: true);
    }






    private void ValidateAndUpdate()
    {
        var countryCount = GetSelectedCountries().Count();
        if (countryCount < 1)
        {
            RussiaSelected = true;
        }
        if (countryCount > 3)
        {
            var selected = GetSelectedCountries().Take(3).ToList();
            RussiaSelected = selected.Contains("Россия");
            KazakhstanSelected = selected.Contains("Казахстан");
            ChinaSelected = selected.Contains("Китай");
            UzbekistanSelected = selected.Contains("Узбекистан");
            BelarusSelected = selected.Contains("Беларусь");
        }

        if (StorageType == "HDD" && (SelectedIOPS == "Высокая (5000)" || SelectedIOPS == "Очень высокая (10000)"))
        {
            SelectedIOPS = "Средняя (1000)";
        }
        UpdatePrice();
    }

    private void UpdatePrice()
    {
        decimal basePrice = SelectedType switch
        {
            "MySQL" => 10m,
            "PostgreSQL" => 15m,
            "MongoDB" => 20m,
            "Redis" => 12m,
            "SQLite" => 5m,
            "Microsoft SQL Server" => 25m,
            "Cassandra" => 18m,
            "Oracle Database" => 30m,
            "MariaDB" => 10m,
            _ => 8m
        };
        decimal iopsMultiplier = SelectedIOPS switch
        {
            "Низкая (100)" => 1m,
            "Средняя (1000)" => 1.5m,
            "Высокая (5000)" => 2m,
            "Очень высокая (10000)" => 3m,
            _ => 1m
        };
        decimal storageMultiplier = StorageType switch
        {
            "HDD" => 0.8m,
            "SSD" => 1.2m,
            "NVMe" => 1.8m,
            _ => 1m
        };
        decimal scalabilityMultiplier = Scalability switch
        {
            "Replication" => 1.3m,
            "Autoscaling" => 1.5m,
            _ => 1m
        };
        decimal countriesMultiplier = GetCountriesMultiplier();
        Price = (basePrice + (SizeGB * 0.10m)) * iopsMultiplier * storageMultiplier * scalabilityMultiplier * countriesMultiplier;
        StateHasChanged();
    }

    private decimal GetCountriesMultiplier()
    {
        var selectedCountries = GetSelectedCountries().Count();
        if (selectedCountries < 1) return 1m;
        if (selectedCountries > 3) return 3.3m;
        return selectedCountries * 1.1m;
    }

    private IEnumerable<string> GetSelectedCountries()
    {
        var countries = new List<string>();
        if (RussiaSelected) countries.Add("Россия");
        if (KazakhstanSelected) countries.Add("Казахстан");
        if (ChinaSelected) countries.Add("Китай");
        if (UzbekistanSelected) countries.Add("Узбекистан");
        if (BelarusSelected) countries.Add("Беларусь");
        return countries;
    }

    private string BoundType
    {
        get => SelectedType;
        set { SelectedType = value; ValidateAndUpdate(); }
    }
    private int BoundSize
    {
        get => SizeGB;
        set { SizeGB = value; ValidateAndUpdate(); }
    }
    private string BoundIOPS
    {
        get => SelectedIOPS;
        set { SelectedIOPS = value; ValidateAndUpdate(); }
    }
    private string BoundStorageType
    {
        get => StorageType;
        set { StorageType = value; ValidateAndUpdate(); }
    }
    private string BoundScalability
    {
        get => Scalability;
        set { Scalability = value; ValidateAndUpdate(); }
    }
}